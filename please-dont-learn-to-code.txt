
Basel Farag is an iOS Engineer (he thinks). Besides GPU processors, robits and AI, Basel enjoys learning about computer science, astronomy and philosophy. He was once referred to as "the Daft Punk of people," a phrase whose meaning eludes him to this day, but which he's pretty sure is a compliment. Theres an idea thats been gaining ground in the tech community lately: Everyone should learn to code.But heres the problem with that idea: Coding is not the new literacy.If you regularly pay attention to the cultural shenanigans of Silicon Valley, youve no doubt heard of the Learn to Code movement. Politicians, nonprofit organizations like Code.org and even former Mayor Michael Bloomberg of New York City have evangelized what they view as a necessary skill for tomorrows workforce.There may be some truth to that, especially since the United States need for engineers shows no sign of slowing down.But the picture is more complicated.We live in an ultra-competitive world, with people turning to all sorts of methods to make ends meet. Selling coding as a ticket to economic salvation for the masses is dishonest.Take coding bootcamps. Since the mainstream learned of the success of Silicon Valley software engineers, everyone wants to own a startup or become an engineer. HBOs Silicon Valley paints a picture of late twenty-somethings spending their nights coding and smoking weed, all whilst making millions of dollars. The American public is amazed by figures like Elon Musk and Mark Zuckerberg, who make millions seemingly overnight. Coding fever has even reached the steps of the White House, with President Obama pushing forlegislationto include computer science in every public-school curriculum.Inexplicably, it is not just bootcamps and politicians encouraging people to learn to code.Individuals are actively encouraged to do so from all sides of society, from Hollywood to current tech luminaries. Despite this growing buzz, I view bootcamps with intense skepticism. While our culture tends to make Silicon Valley sexy, andglossy bootcamp brochurespromise well-paying jobs, the truth is that many of these institutions are not accredited, do not post job statistics and do a poor job of ensuring their students post-bootcamp success.While many codingbootcamps are legitimateand care for their pupils, an even greater number are run by modern snake-oil salespeople tapping into the average Americans desperation.Dont get me wrong; I do believe that engineering and programming are important skills. But only in the right context, and only for the type of person willing to put in the necessary blood, sweat and tears to succeed. The same could be said of many other skills. I would no more urge everyone to learn to program than I would urge everyone to learn to plumb.Focusing on coding inflates the importance of finding the right method to solve a problem rather than the importance of understanding the problem.Before we start working on a solution to a coding problem wemust decide what the problem is  and if its truly a problem. If we let ourselves become fixated on how to solve a problem via code, regardless of if it is a programming problem or not, and lose sight of why, we gain nothing.I have a close friend who is a formerAssociation for Computing Machinery International Collegiate Programming Contestchampion from Stanford. The greatest thing he taught me about his ACM championship days was the importance of understanding what problem youre trying to solve.You must ask yourself, Do you even have one? and Can you apply the Feynman principleand explain it in a way that others can understand you?This friend told me that even in the elite schools, students read the prompt to the coding problem only once then immediately code.The year my friend won the championship he learned something: even those from elite schools dove headfirst into complicated problems, with code as their only weapon.Meanwhile, my friend wrote his code only after thoroughly understanding the problem. He used almost allthe allotted time to think about the problem. He did not write code until minutes before the deadline.He became a champion.He knew that banging out code would not solve the problem, but cool, collected problem solving would.An excessive focus on coding ignores the current plight of existing developers.Technology changes at a rapid pace in this industry.Just a few years ago I was using Objective-C; now I code almost entirely in Swift. There are iOS developers applying for jobs right now who have never written a line of Objective-C. Swift is easier to learn, safer, uses modern development paradigms and is elegant in a way that Objective-C never was. The fact that new developers will never deal with Objective-Cs deficiencies isgreat, but it ignores the reality of the profession.Developers are expected to learn fast, with little guidance and little more incentive than the faint rattling of the pink-slip guillotine. One could argue that this is simply one of the costs of the trade. But if current developers are frustrated or falling behind  and there is evidence that shows thisis the case why encourage individuals to enter such an uncertain realm?What happens to the person who spent night and day studying Objective-C only to be horrified by the Swift announcement at WWDC 2014? Do they keep coding in what is quickly becoming the language of lesser choice, or do they start again? If youre a young twenty-something, this may pose little difficulty, but if youre taking care of a family  with bills to pay and mouths to feed  the task becomes Herculean.People in these situations confront all of this without a solid grasp of actual programming or engineering.The line between learning to code and getting paid to program as a profession is not an easy line to cross.Really.It took me more thana year of self-taught study before I got a freelance gig. Even then, the pay was poor. There were countless times I was refused even an interview because I didnt have a computer science degree.There were times when I could not afford a place to stay and had to rely on the kindness of friends to keep me going. There were many nightswhen I wanted to give up. But I found the strength to keep going.It was  and is  persistence that allows me to stay in this field.The truth is, it simply isnt easy to slide into a development gig, even if its an apprenticeship. You need connections, people to vouch for you, a GitHub accountmaintained over time and more. Despite advances in equal opportunity, if youre an underrepresented minority, youre going to have to be twice as good as everyone else. And thats simply to demonstrate competence.The gatekeepers are anywhere. They are Ivy League graduates who believe asking questions like, How do you invert a binary tree? is the best way to gauge someones technical ability. They are the whiteboard test-obsessed project managers (confession: I own multiple whiteboards) and the clueless HR managers who list requirements like, 5 years of Swift Programming Language Experience needed in job postings (hint: Swift release = 2014). These people, for better or for worse, stand between you and a decent job.As far as I know, theres no other way to get past these people than to play their game, even if it is unfair.If becoming an engineer is what you want, dont let me  or anyone, for that matter  get in the way of your goal. And dont let traditional confinements like the educational system slow you down. There are no correct or incorrect ways to go about achieving your goals.But dont lose sight of reality while being charmed by our cultures Silicon Valley romance. This field is not a get-out-of-debt-free card. You have to take the time to build your understanding of the field. You have to become comfortable with the fact that you are a problem-solver and not simply a fill-in-framework-here developer. You also must get used to the idea that at any moment you might need to learn a new framework or language, and that you will have to fight for a job if you dont have formalized credentials.Software engineering is a lucrative field, but the transformation from coder to engineer is challenging.If you stick to it, you can not only change your life, but change your entire way of thinking.